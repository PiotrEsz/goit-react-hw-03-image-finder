{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Piotr\\\\Documents\\\\GitHub\\\\goit-react-hw-03-image-finder1\\\\src\\\\components\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport Searchbar from './Searchbar/Searchbar';\nimport axios from 'axios';\nimport fetchImages from '../utils/api';\nimport ImageGallery from './ImageGallery/ImageGallery';\nimport key from '../utils/key.json';\nimport Modal from './Modal/Modal';\nimport Button from './Button/Button';\nimport Loader from './Loader/Loader';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = `https://pixabay.com/api`;\nconst KEY = Object.values(key);\nlet params = '';\nconst INITIAL_STATE = {\n  images: [],\n  query: '',\n  page: 1,\n  perPage: 12,\n  largeImageURL: '',\n  isLoading: false,\n  error: null,\n  isModalVisible: false,\n  totalHits: 0,\n  isLastPage: false\n};\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      ...INITIAL_STATE\n    };\n    this.handleSubmit = async (query, firstPage) => {\n      if (this.state.query !== query) {\n        this.setState({\n          query,\n          images: [],\n          page: 1,\n          isLastPage: false\n        });\n        params = `/?q=${query}&page=1&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${this.state.perPage}`;\n      } else params = `/?q=${query}&page=${this.state.page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${this.state.perPage}`;\n\n      //starts with loading status\n      this.setState({\n        isLoading: true\n      });\n      try {\n        //invoking fetching images\n        const images = await fetchImages(params);\n\n        //setting new state values\n        this.setState({\n          images: images.hits,\n          totalHits: images.totalHits,\n          isLastPage: this.checkIfLastPage(images.totalHits)\n        });\n\n        //changing state and add new images to existing ones on load more btn\n        if (images && images.hits.length > 0) {\n          this.setState(() => {\n            return {\n              images: [...this.state.images, ...images.hits],\n              page: this.state.page + 1,\n              isLoading: false\n            };\n          });\n        }\n      } catch (error) {\n        //handling error\n        this.setState({\n          error\n        });\n        toast.error(error.message, {\n          position: 'top-right',\n          autoClose: 2500,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          theme: 'light'\n        });\n      } finally {\n        // changing state for laoder independently on promise (fetchImages) return\n        this.setState({\n          isLoading: false\n        });\n      }\n    };\n    this.checkIfLastPage = totalHits => {\n      const noOfPages = Math.ceil(totalHits / this.state.perPage);\n      const isLastPage = noOfPages === this.state.page;\n      return isLastPage;\n    };\n    this.showModal = largeImg => {\n      this.setState({\n        isModalVisible: true,\n        largeImageURL: largeImg\n      });\n    };\n    this.hideModal = () => {\n      this.setState({\n        isModalVisible: false,\n        //!this.state.isModalVisible,\n        largeImageURL: ''\n      });\n    };\n    this.loadMore = async e => {\n      e.preventDefault();\n      this.handleSubmit(this.state.query);\n    };\n    this.messageIfMax = () => {\n      toast.info(\"You've have reached maximum number of images \", {\n        position: 'top-right',\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: true,\n        progress: undefined,\n        theme: 'light'\n      });\n    };\n  } //method to return isLastPage (boolean) basing on number of hits for searching\n  //method to show modal basing on isModalVisible state value\n  //method to show modal basing on isModalVisible state value\n  //method to show info if maximum number of images is loaded\n  render() {\n    const {\n      images,\n      isLoading,\n      isModalVisible,\n      query,\n      largeImageURL,\n      page,\n      totalHits,\n      isLastPage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Searchbar, {\n        onFormSubmit: this.handleSubmit,\n        query: query,\n        pageNo: page\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(ImageGallery, {\n        imagesArr: images,\n        showModal: this.showModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), isModalVisible && /*#__PURE__*/_jsxDEV(Modal, {\n        hideMod: this.hideModal,\n        largeImg: largeImageURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), totalHits > 12 && isLastPage === false ? /*#__PURE__*/_jsxDEV(Button, {\n        loadMore: this.loadMore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this) : '', isLastPage === true && this.messageIfMax()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Searchbar","axios","fetchImages","ImageGallery","key","Modal","Button","Loader","toast","ToastContainer","jsxDEV","_jsxDEV","defaults","baseURL","KEY","Object","values","params","INITIAL_STATE","images","query","page","perPage","largeImageURL","isLoading","error","isModalVisible","totalHits","isLastPage","App","constructor","arguments","state","handleSubmit","firstPage","setState","hits","checkIfLastPage","length","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","theme","noOfPages","Math","ceil","showModal","largeImg","hideModal","loadMore","e","preventDefault","messageIfMax","info","progress","undefined","render","className","children","onFormSubmit","pageNo","fileName","_jsxFileName","lineNumber","columnNumber","imagesArr","hideMod"],"sources":["C:/Users/Piotr/Documents/GitHub/goit-react-hw-03-image-finder1/src/components/App.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Searchbar from './Searchbar/Searchbar';\r\nimport axios from 'axios';\r\nimport fetchImages from '../utils/api';\r\nimport ImageGallery from './ImageGallery/ImageGallery';\r\nimport key from '../utils/key.json';\r\n\r\nimport Modal from './Modal/Modal';\r\nimport Button from './Button/Button';\r\nimport Loader from './Loader/Loader';\r\n\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'index.css';\r\n\r\naxios.defaults.baseURL = `https://pixabay.com/api`;\r\n\r\nconst KEY = Object.values(key);\r\n\r\nlet params = '';\r\n\r\nconst INITIAL_STATE = {\r\n  images: [],\r\n  query: '',\r\n  page: 1,\r\n  perPage: 12,\r\n  largeImageURL: '',\r\n  isLoading: false,\r\n  error: null,\r\n  isModalVisible: false,\r\n  totalHits: 0,\r\n  isLastPage: false,\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n\r\n  handleSubmit = async (query, firstPage) => {\r\n    if (this.state.query !== query) {\r\n      this.setState({ query, images: [], page: 1, isLastPage: false });\r\n      params = `/?q=${query}&page=1&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${this.state.perPage}`;\r\n    } else\r\n      params = `/?q=${query}&page=${this.state.page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${this.state.perPage}`;\r\n\r\n    //starts with loading status\r\n    this.setState({ isLoading: true });\r\n\r\n    try {\r\n      //invoking fetching images\r\n      const images = await fetchImages(params);\r\n\r\n      //setting new state values\r\n      this.setState({\r\n        images: images.hits,\r\n        totalHits: images.totalHits,\r\n        isLastPage: this.checkIfLastPage(images.totalHits),\r\n      });\r\n\r\n      //changing state and add new images to existing ones on load more btn\r\n      if (images && images.hits.length > 0) {\r\n        this.setState(() => {\r\n          return {\r\n            images: [...this.state.images, ...images.hits],\r\n            page: this.state.page + 1,\r\n            isLoading: false,\r\n          };\r\n        });\r\n      }\r\n    } catch (error) {\r\n      //handling error\r\n      this.setState({ error });\r\n\r\n      toast.error(error.message, {\r\n        position: 'top-right',\r\n        autoClose: 2500,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: false,\r\n        draggable: false,\r\n        theme: 'light',\r\n      });\r\n    } finally {\r\n      // changing state for laoder independently on promise (fetchImages) return\r\n      this.setState({ isLoading: false });\r\n    }\r\n  };\r\n\r\n  //method to return isLastPage (boolean) basing on number of hits for searching\r\n  checkIfLastPage = totalHits => {\r\n    const noOfPages = Math.ceil(totalHits / this.state.perPage);\r\n    const isLastPage = noOfPages === this.state.page;\r\n\r\n    return isLastPage;\r\n  };\r\n\r\n  //method to show modal basing on isModalVisible state value\r\n  showModal = largeImg => {\r\n    this.setState({ isModalVisible: true, largeImageURL: largeImg });\r\n  };\r\n\r\n  //method to show modal basing on isModalVisible state value\r\n  hideModal = () => {\r\n    this.setState({\r\n      isModalVisible: false, //!this.state.isModalVisible,\r\n      largeImageURL: '',\r\n    });\r\n  };\r\n\r\n  loadMore = async e => {\r\n    e.preventDefault();\r\n\r\n    this.handleSubmit(this.state.query);\r\n  };\r\n\r\n  //method to show info if maximum number of images is loaded\r\n  messageIfMax = () => {\r\n    toast.info(\"You've have reached maximum number of images \", {\r\n      position: 'top-right',\r\n      autoClose: 2000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: 'light',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      images,\r\n      isLoading,\r\n      isModalVisible,\r\n      query,\r\n      largeImageURL,\r\n      page,\r\n      totalHits,\r\n      isLastPage,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Searchbar\r\n          onFormSubmit={this.handleSubmit}\r\n          query={query}\r\n          pageNo={page}\r\n        />\r\n        {isLoading && <Loader />}\r\n\r\n        <ImageGallery imagesArr={images} showModal={this.showModal} />\r\n        {isModalVisible && (\r\n          <Modal hideMod={this.hideModal} largeImg={largeImageURL} />\r\n        )}\r\n        <ToastContainer />\r\n        {totalHits > 12 && isLastPage === false ? (\r\n          <Button loadMore={this.loadMore} />\r\n        ) : (\r\n          ''\r\n        )}\r\n        {isLastPage === true && this.messageIfMax()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}